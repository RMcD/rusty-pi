== Blinking Lights

Blinking an LED via GPIO is the Hello World of physical computing -- a
simple program that will cause some visible effect in the connected
hardware.  It will also demonstrate some more Rust language concepts,
including modules, control flow, ownership and lifetimes, I/O and 
error handling.

== What is GPIO?

GPIO, which stands for general-purpose input/output, is the simplest
digital I/O you can do with a computer.  A GPIO pin can controlled by
software to either set or read set the logical voltage level at the
pin.  A GPIO output pin can turn an LED or buzzer on and off, for
example.  An input pin can receive input from a button or sensor.

Eight of the pins on the Raspberry Pi's header are dedicated GPIO. The
Raspbian operating system makes the GPIO pins available to user-space
programs as files in the /sys filesystem. Getting to grips with GPIO
programming can be pretty confusing at first because of the multitude
of ways in which GPIO pins are identified in the Raspberry Pi
documentation.

The pins on the header connect to the pins of the system-on-a-chip
(SoC) at the heart of the Raspberry Pi.  Each SoC pin has a number.
Twenty six of the SoC pins are routed to the header, but those twenty
six pins do not have consecutive numbers. The Raspberry Pi
documentation fives the header pins numbers 1 to 26 and also uses the
names GP0 to GP7 for the eight header pins dedicated to GPIO, but
neither the header pin number nor the GP0 to GP7 names has any
relation to the number used by the SoC for that pin.

The operating system's programming interface for GPIO addresses the
pins _only_ by their SoC pin numbers.  When programming GPIO, we can
ignore the header pin number and the GP0 to GP7 names used for the
GPIO pins.  We only need to know the header pin number when connecting
physical wires to physical pins.

To avoid confusion this book only refers to GPIO pins by their SoC
numbers and does not use the names GP0 to GP7. The circuit diagrams
show how the SoC pin numbers relate to the physical header pins.

Let's have a look at the circuit we need to build to blink an LED with
GPIO.

TIP: If you buy a breakout board, make that it labels the GPIO pins
     with their the SoC numbers, not GP0...GP7.

=== The Circuit

You will need:

 * a breadboard
 * one LED
 * one 220{ohm} resistor
 * three long female-to-male jumpers

.An LED connected to GPIO pin 18
image::blink.svg[]


=== Controlling the GPIO Pin from Software

The Raspbian operating system exposes each GPIO pin to user space
processes as a directory of text files in the /sys filesystem. Because
the pins are controlled by reading and writing text files, we can
easily use GPIO from any language, even shell scripts.

The GPIO pins are not initially visible in the /sys filesystem. To
start using a pin, a program must "export" it to user space by writing
the number of the pin it wants to use into the control file
/sys/class/gpio/export. This requires root privileges.

For example, the following shell command will export pin 18 to user
space, using the sudo to run `tee` command with elevated privileges so
that it can write to the /sys/class/gpio/export file.

----------------------------------------------
% echo 18 | sudo tee /sys/class/gpio/export
18
----------------------------------------------

If that succeeds, the kernel will make the pin's control files
available in a subdirectory of /sys/class/gpio that is named after the
pin number, in this case /sys/class/gpio/gpio18/.

----------------------------------------------
% ls /sys/class/gpio/gpio18/
active_low  direction  edge  power  subsystem  uevent  value
----------------------------------------------

The most commonly used files are direction and value. The `direction`
file reports (when read) and controls (when written) whether the pin
is used for input or output. Reading from the `value` file reports the
voltage level at the pin.  A high voltage is represented as the text
"1" and a low voltage as "0". If the pin has been configured for
output, writing to the value file will set the voltage level of the
pin.

With this knowledge we can blink the LED connected to pin 18 from the
shell.

First, set the pin to output mode:

----------------------------------------------
% echo out | sudo tee /sys/class/gpio/gpio18/direction
out
----------------------------------------------

Then write 1 into the pin's value file.  The LED should light up.

----------------------------------------------
% echo 1 | sudo tee /sys/class/gpio/gpio18/value
1
----------------------------------------------

Write 0 into the pin's value file to turn the LED off.

----------------------------------------------
% echo 0 | sudo tee /sys/class/gpio/gpio18/value
0
----------------------------------------------

Do that in a loop with sleep to blink the LED until you press
Control-C.

----------------------------------------------
% while true
> do
>     echo 1 | sudo tee /sys/class/gpio/gpio18/value
>     sleep 1
>     echo 0 | sudo tee /sys/class/gpio/gpio18/value
>     sleep 1
> done
0
1
0
1
...
----------------------------------------------

When we've finished using the pin we should unexport it, which removes
its control files from the filesystem.

----------------------------------------------
% echo 18 | sudo tee /sys/class/gpio/unexport
18
----------------------------------------------

.The Importance of Error Handling
[TIP]
=======================================================================
It's best to export a GPIO pin just before we want to use it and
unexport the pin as soon as we've finished with it.  This helps avoid
interference between processes trying to use the same pin. When a pin
has been exported to user space, further writes to the export file
will fail.

----------------------------------
% echo 18 | sudo tee /sys/class/gpio/export
18
tee: /sys/class/gpio/export: Device or resource busy
% echo $?
1
----------------------------------

A process will not be able to disrupt ongoing GPIO, as long as it
checks for I/O errors when exporting its pins.  In shell scripts and C
it's too easy to ignore I/O failures and allow erroneous behaviour to
occur.  Rust does not let us be so lazy, as we will see.
=======================================================================

Now we understand the basics of GPIO in Rasbian, let's write it in
Rust.  We'll go step by step, building up the functionality and
explaining Rust's features as we go.  If you're impatient to see some
blinking lights, feel free to jump ahead, compile 
<<raw-blink,the full program>> 
and run it onto your Pi before coming back here to examine into the 
Rust features that are used in the program.

=== First Step - Export and Unexport the Pin




=== The Code

[[raw-blink]]
---------------------------------------------
include::../src/raw-blink.rs[]
---------------------------------------------
