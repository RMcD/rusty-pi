== A Look At The Raspberry Pi

=== The Raspberry Pi

The Raspberry Pi is a credit-card-sized single-board computer developed 
by the Raspberry Pi Foundation to promote the teaching  of basic computer
science in schools.

include::pi-photo.asciidoc[]

The Pi is built around a 32-bit ARMv6 system-on-a-chip (SoC) footnote:[the Broadcom BCM2835], has 512MB of RAM, a USB port for keyboard and mouse, and can output HDMI video to a TV or monitor. It uses an SD card instead of a hard-drive. Although small, the Raspberry Pi is powerful enough to run a desktop operating system and games like Minecraft.

One way in which the Raspberry Pi differs from consumer PCs is that it does not come with a pre-installed operating system. You have to download one and copy it onto an SD card so that you can boot up the Pi and start using it.
Several operating systems are available, including several Linux distributions. The Raspberry Pi Foundation recommends Raspbian, a variant of Debian Linux, so I'm using Raspbian for the examples in this book.  If you're used to a Debian, or a Debian-based Linux distribution like Ubuntu, Raspbian will be very familiar.  If you prefer a different Linux distribution, I assume you know enough translate any Raspbian-specific commands to your preferred environment.  The Rust programs should behave the same on any Linux distribution.

== Interfaces



=== Circuit Diagrams

The circuit diagrams in this book will clearly identify the header pins of
the Raspberry Pi, as shown in <<pi-fritzing>>.

[[pi-fritzing]]
.Raspberry Pi as displayed in a circuit diagrams
image:pi.svg[]

Those markings aren't printed on the Pi itself.  Some people like to
print the header pin identifiers on a small piece of paper that they
push over the pins, or use a breakout board that has the pins more
clearly marked.

=== Protecting Your Pi

TODO

=== Compiling Programs for the Pi

Although the Raspberry Pi can be used as a Linux PC with a graphical
desktop interface, I find it a bit too slow for software development
compared to a laptop or desktop PC.  When using my Pi to control
hardware, I prefer to write software on my laptop, compile it for the
Pi with a cross-compiler footnote:[a compiler that runs on one architecture, such as my laptop running Ubuntu on an Intel x86, and outputs programs for another architecture, such as the Raspberry Pi running Raspbian on an ARM], and deploy the compiled program onto the Pi when I want to test it against real hardware.

So, there are two things to sort out before writing Rust programs for
the Pi:

1. <<compile-cross-compiler,A Rust cross-compiler>>
2. <<dev-environment,How to deploy compiled Rust programs onto the Pi>>


